
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
<style>
  .img-thumbnail {
  width: 200px; 
  height: auto; 
}
</style>
<style>
  .selected-images-container {
      display: flex;
      flex-direction: column;
      gap: 20px;
      margin: 20px 0;
  }

  .image-crop-container {
      border: 1px solid #ddd;
      padding: 15px;
      border-radius: 8px;
      background-color: #f8f9fa;
  }

  .image-container {
      margin-bottom: 15px;
  }

  .img-thumbnail {
      width: 100%;
      max-width: 400px;
      height: auto;
      margin-bottom: 10px;
  }

  .crop-button {
      background-color: #007bff;
      color: white;
      border: none;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      width: 100%;
      max-width: 400px;
  }

  .crop-button:hover {
      background-color: #0056b3;
  }

  #images {
      margin-bottom: 20px;
  }

  .cropper-container {
      max-width: 100%;
  }
</style>
</head>

<body>
    <div class="container mt-5">
        <h1 class="mb-4">Add Product</h1>
        <div class="alert alert-danger" style="display: none;"></div>

        <form action="/admin/product/addProduct" method="post" id="upload-form" enctype="multipart/form-data">
            <div class="form-group">
                <label for="productName">Product Name</label>
                <input type="text" class="form-control" id="productName" placeholder="Enter product name"
                    name="productName" value="" required>
                
                <span></span>
            </div>
            <div class="form-group">
                <label for="productPrice">Product Price</label>
                <input type="number" class="form-control" id="productPrice" placeholder="Enter product price"
                    name="price" value="" required>
                
                <span></span>
            </div>
            <div class="form-group">
                <label for="productStock">Stock</label>
                <input type="number" class="form-control" id="productStock" placeholder="Enter stock quantity"
                    name="stock" value="" required>
                
                <span></span>
            </div>
            <div class="form-group">
                <label for="FitType">Fit Type</label>
                <input type="text" class="form-control" id="FitType" placeholder="Enter product FitType"
                    name="FitType" value="" required>
                
                <span></span>
            </div>
          
            <div class="form-group">
                <label for="colour">Colour</label>
                <input type="text" class="form-control" id="colour" placeholder="Enter product Colour"
                    name="colour" value="" required>
                
                <span></span>
            </div>
          
            <div class="form-group">
                <label for="size">Size</label>
                <input class="form-control" id="size" placeholder="Enter product size"
                    name="size" value="" required>
                
                <span></span>
            </div>
            <div class="form-group">
                <label for="features">Description</label>
                <input type="text" class="form-control" id="features" placeholder="Enter product Description"
                    name="Description" value="" required>
           
                <span></span>
            </div>
            <div class="form-group">
                <label for="productBrand">Brand</label>
                <select class="form-control" id="productBrand" name="brand" required>
                    <% brands.forEach(brand => { %>
                    <option value="<%= brand._id %>"><%= brand.name %></option>
                    <% }) %>
                </select>
            </div>
            <div class="form-group">
                <label for="productCategory">Category</label>
                <select class="form-control" id="productCategory" name="category" required>
                    <% categories.forEach(category => { %>
                    <option value="<%= category._id %>"><%= category.name %></option>
                    <% }) %>
                </select>
            </div>

            <div class="container mt-5">
              <h2>Select Three Images</h2>
              <label for="image">Image:</label><br />
              <input
                  type="file"
                  id="images"
                  name="images"
                  accept="image/*"
                  multiple
                  class="form-control-file"
                  onchange="displaySelectedImages(this)"
              />
              <div class="selected-images-container" id="selectedImagesContainer"></div>
              <span class="error-message" id="images-error" style="color: red"></span>
          </div>
            <button type="submit" class="btn btn-primary d-block">Add Product</button>
        </form>
        
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.9.2/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    
    <script>
        function displaySelectedImages(input) {
            const selectedImagesContainer = document.getElementById("selectedImagesContainer");
            selectedImagesContainer.innerHTML = "";
            
            if (input.files.length > 3) {
                document.getElementById("images-error").textContent = "Please select maximum 3 images";
                input.value = "";
                return;
            }

            for (let i = 0; i < input.files.length; i++) {
                const file = input.files[i];
                const reader = new FileReader();
                const cropContainer = document.createElement("div");
                cropContainer.classList.add("image-crop-container");
                cropContainer.innerHTML = `
                    <div class="image-container">
                        <img id="image${i}" src="" alt="Select an image to crop" class="img-thumbnail">
                    </div>
                    <button class="crop-button" id="cropButton${i}">
                        <i class="fa fa-crop"></i> Crop Image ${i + 1}
                    </button>
                `;
                selectedImagesContainer.appendChild(cropContainer);

                const image = cropContainer.querySelector(`#image${i}`);
                const cropButton = cropContainer.querySelector(`#cropButton${i}`);
                let cropper = null;

                reader.onload = () => {
                    image.src = reader.result;
                };

                cropButton.addEventListener("click", (event) => {
                    event.preventDefault();
                    if (cropper) {
                        const canvas = cropper.getCroppedCanvas({
                            width: 800,
                            height: 800,
                            imageSmoothingEnabled: true,
                            imageSmoothingQuality: 'high',
                        });
                        
                        const croppedImageDataURL = canvas.toDataURL('image/jpeg', 1.0);
                        image.src = croppedImageDataURL;
                        
                        const croppedImageFile = dataURLToFile(croppedImageDataURL, file.name);
                        const currentFiles = Array.from(input.files);
                        currentFiles[i] = croppedImageFile;
                        
                        const newFileList = createFileList(currentFiles);
                        input.files = newFileList;
                        
                        cropper.destroy();
                        cropper = null;
                        cropButton.innerHTML = '<i class="fa fa-crop"></i> Crop Image ' + (i + 1);
                    } else {
                        cropper = new Cropper(image, {
                            aspectRatio: 1,
                            viewMode: 1,
                            ready: function() {
                                cropButton.innerHTML = '<i class="fa fa-check"></i> Save Crop';
                            }
                        });
                    }
                });

                reader.readAsDataURL(file);
            }
        }

        function dataURLToFile(dataUrl, filename) {
            const arr = dataUrl.split(",");
            const mime = arr[0].match(/:(.*?);/)[1];
            const bstr = atob(arr[1]);
            let n = bstr.length;
            const u8arr = new Uint8Array(n);
            while (n--) {
                u8arr[n] = bstr.charCodeAt(n);
            }
            return new File([u8arr], filename, { type: mime });
        }

        function createFileList(currentList) {
            const dataTransfer = new DataTransfer();
            currentList.forEach((file) => {
                dataTransfer.items.add(file);
            });
            return dataTransfer.files;
        }
    </script>
</body>

</html>
