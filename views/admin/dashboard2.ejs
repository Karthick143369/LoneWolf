
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    
    <style>
        .product-card {
            transition: transform 0.2s, box-shadow 0.2s;
            height: 100%;
        }
        
        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .card-img-wrapper {
            position: relative;
            padding-top: 75%; /* 4:3 Aspect Ratio */
            overflow: hidden;
        }

        .card-img-top {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .offer-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(220, 53, 69, 0.9);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-weight: 600;
        }

        .offer-details {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 1rem;
            margin-top: 1rem;
        }

        .offer-dates {
            font-size: 0.9rem;
            color: #6c757d;
        }

        .price-section {
            display: flex;
            align-items: baseline;
            gap: 0.5rem;
        }

        .original-price {
            text-decoration: line-through;
            color: #6c757d;
            font-size: 0.9rem;
        }

        .discounted-price {
            color: #dc3545;
            font-weight: 600;
            font-size: 1.2rem;
        }

        .action-buttons {
            gap: 0.5rem;
        }

        .page-header {
            background: linear-gradient(to right, #4a90e2, #67b26f);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
        }
    </style>

<style>
    :root {
        --primary-color: #2563eb;
        --secondary-color: #1e40af;
        --success-color: #059669;
        --danger-color: #dc2626;
        --warning-color: #d97706;
        --info-color: #0891b2;
        --light-gray: #f3f4f6;
        --dark-gray: #4b5563;
        --sidebar-width: 280px;
    }
    
    body {
        font-family: 'Inter', -apple-system, sans-serif;
        background-color: #f8fafc;
    }
    
    .sidebar {
        width: var(--sidebar-width);
        height: 100vh;
        position: fixed;
        left: 0;
        top: 0;
        padding: 1.5rem;
        background: white;
        box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1);
    }
    
    .main-content {
        margin-left: var(--sidebar-width);
        padding: 2rem;
        background-color: #f8fafc;
        min-height: 100vh;
    }
    
    .brand {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 2px solid var(--light-gray);
    }
    
    .nav-item {
        padding: 0.75rem 1rem;
        margin-bottom: 0.5rem;
        border-radius: 8px;
        color: var(--dark-gray);
        text-decoration: none;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
    }
    
    .nav-item:hover {
        background-color: var(--light-gray);
        color: var(--primary-color);
    }
    
    .nav-item.active {
        background-color: var(--primary-color);
        color: white;
    }
    
    .nav-icon {
        width: 24px;
        margin-right: 12px;
        opacity: 0.9;
    }
    
    .table {
        background: white;
        border-radius: 12px;
        box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1);
        margin-top: 1.5rem;
    }
    
    .table thead {
        background-color: var(--light-gray);
    }
    
    .table th {
        font-weight: 600;
        color: var(--dark-gray);
        padding: 1rem;
        border-bottom: 2px solid #e5e7eb;
    }
    
    .table td {
        padding: 1rem;
        vertical-align: middle;
    }
    
    .status-select {
        padding: 0.5rem;
        border-radius: 6px;
        border: 1px solid #e5e7eb;
        width: 140px;
    }
    
    .btn-view {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 0.5rem 1.5rem;
        border-radius: 6px;
        transition: all 0.3s ease;
    }
    
    .btn-view:hover {
        background-color: var(--secondary-color);
    }
    
    .product-img {
        width: 50px;
        height: 50px;
        border-radius: 8px;
        object-fit: cover;
        margin-right: 1rem;
    }
    
    .product-cell {
        display: flex;
        align-items: center;
    }
    
    .status-badge {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.875rem;
        font-weight: 500;
    }
    
    .status-pending {
        background-color: #fef3c7;
        color: var(--warning-color);
    }
    
    .status-processing {
        background-color: #e0f2fe;
        color: var(--info-color);
    }
    
    .status-delivered {
        background-color: #dcfce7;
        color: var(--success-color);
    }
    
    .status-cancelled {
        background-color: #fee2e2;
        color: var(--danger-color);
    }
</style>
</head>

<body>
    
<div class="container-fluid p-0">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="brand">LoneWolf</div>
        <nav class="d-flex flex-column">
            <a href="/admin/dashboard" class="nav-item">
                <span class="nav-icon">üë•</span>
                Customers
            </a>
            <a href="/admin/product/productList" class="nav-item">
                <span class="nav-icon">üì¶</span>
                Products
            </a>
            <a href="/admin/category" class="nav-item">
                <span class="nav-icon">üìÅ</span>
                Categories
            </a>
            <a href="/admin/dashboard2" class="nav-item active">
                <span class="nav-icon">üìä</span>
                Dashboard
            </a>
            <a href="/admin/product/orderList" class="nav-item ">
                <span class="nav-icon">üõçÔ∏è</span>
                Orders
            </a>
            <a href="/admin/coupons" class="nav-item ">
                <span class="nav-icon">üè∑Ô∏è</span>
                Coupons
            </a>
            <a href="/admin/product/offerList" class="nav-item ">
                <span class="nav-icon">üéÅ</span>
                Product Offers
            </a>
            <a href="/admin/categoryOffer" class="nav-item ">
                <span class="nav-icon">üéÅ</span>
                Category Offers
            </a>
            <a href="/admin/logout" class="nav-item">
                <span class="nav-icon">üö™</span>
                Logout
            </a>
    </nav>
</div>

  <!-- Main Content -->
<div class="main-content flex-grow-1">
<main id="site-main">


        <div class="container">
            <!-- <h1>Admin Dashboard</h1> -->
            <!-- Page Heading -->
            <div class="d-sm-flex align-items-center justify-content-between mb-4">
                <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
                <!-- <a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i
                        class="fas fa-download fa-sm text-white-50"></i> Generate Report</a> -->
            <div class="mt-4">
            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#reportModal" onclick="setReportType('pdf')">Sales Report(PDF)</button>
            <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#reportModal" onclick="setReportType('excel')">Sales Report(EXCEL)</button>
            </div>
            </div>
         

            <h2>Orders</h2>
          

            <div class="mt-3">
                <label for="timeIntervalSelect">Select Interval:</label>
                <select class="form-select" id="timeIntervalSelect">
                    <option value="" selected>Select Interval</option>
                    <option value="day" id="byDayOption">By Day</option>
                    <option value="month" id="byMonthOption">By Month</option>
                    <option value="year" id="byYearOption">By Year</option>
                </select>
            </div>

            <div id="dateInput" class="mt-2" style="display: none;">
                <label for="dateSelect">Date:</label>
                <input type="date" id="dateSelect">
            </div>

            <div id="monthInput" class="mt-2" style="display: none;">
                <label for="monthSelect">Month:</label>
                <input type="month" id="monthSelect">
            </div>

            <div id="yearInput" class="mt-2" style="display: none;">
                <label for="yearSelect">Year:</label>
                <input type="number" id="yearSelect" min="2022" max="2025" step="1">
            </div>

            <!-- showing charts here -->
             <div class="chart-container">
                <canvas id="orderChart"></canvas>
                <canvas id="categoryChart" ></canvas>
             </div>
            
        </div>
       

        <!-- Modal for Report Generation -->
<div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reportModalLabel">Generate Sales Report</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="reportIntervalSelect" class="form-label">Select Interval:</label>
                    <select class="form-select" id="reportIntervalSelect">
                        <option value="" selected>Select Interval</option>
                        <option value="day">By Day</option>
                        <option value="week">By Week</option>
                        <option value="month">By Month</option>
                        <option value="year">By Year</option>
                        <option value="custom">By Custom</option>
                    </select>
                </div>

                <div id="reportDateInput" class="mb-3" style="display: none;">
                    <label for="reportDateSelect" class="form-label">Date:</label>
                    <input type="date" id="reportDateSelect" class="form-control">
                </div>

                <div id="reportWeekInput" class="mb-3" style="display: none;">
                    <label for="reportWeekSelect" class="form-label">Select Week:</label>
                    <input type="week" id="reportWeekSelect" class="form-control">
                </div>

                <div id="reportMonthInput" class="mb-3" style="display: none;">
                    <label for="reportMonthSelect" class="form-label">Month:</label>
                    <input type="month" id="reportMonthSelect" class="form-control">
                </div>

                <div id="reportYearInput" class="mb-3" style="display: none;">
                    <label for="reportYearSelect" class="form-label">Year:</label>
                    <input type="number" id="reportYearSelect" class="form-control" min="2022" max="2025" step="1">
                </div>

                <div id="reportCustomDateRange" class="mb-3" style="display: none;">
                    <label for="reportStartDate" class="form-label">Start Date:</label>
                    <input type="date" id="reportStartDate" class="form-control">
                    <label for="reportEndDate" class="form-label mt-2">End Date:</label>
                    <input type="date" id="reportEndDate" class="form-control">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary " id="closeButton" data-bs-dismiss="modal">Close</button>
                <button type="button" id="generateReportButton" class="btn btn-primary">Generate Report</button>
            </div>
        </div>
    </div>
</div>

<!-- HTML for Best Selling Tables -->
<div class="container mt-5">
    <div class="row">
        <!-- Best Selling Products Table -->
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Best Selling Products (Top 10)</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="bestSellingProductsTable" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Product Name</th>
                                    <th>Sales</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% topProducts.forEach(product=> { %>
                                    <tr>
                                        <td><%= product.productName %></td>
                                        <td><%= product.totalSales %></td>
                                    </tr>
                                    <% }) %>
                                
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Best Selling Categories Table -->
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Best Selling Categories (Top 10)</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="bestSellingCategoriesTable" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Category Name</th>
                                    <th>Sales</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% topCategories.forEach(function(category) { %>
                                    <tr>
                                        <td><%= category.categoryName %></td>
                                        <td><%= category.totalSales %></td>
                                    </tr>
                                    <% }) %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <!-- Best Selling Brands Table -->
        <div class="col-lg-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="m-0 font-weight-bold text-primary">Best Selling Brands (Top 10)</h6>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" id="bestSellingBrandsTable" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Brand Name</th>
                                    <th>Sales</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% topBrands.forEach(function(brand) { %>
                                    <tr>
                                        <td><%= brand.brandName %></td>
                                        <td><%= brand.totalSales %></td>
                                    </tr>
                                    <% }) %>
                    
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

         <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> 
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script> 

        <!-- Bootstrap JS and dependencies (jQuery and Popper.js) -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

        <!-- <script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script> -->

        <script>

document.addEventListener('DOMContentLoaded', async () => {
    const rawOrderData = `<%- orderData %>`;
    try {
        const orderData = JSON.parse(rawOrderData);
        console.log('Order data is:', orderData);

        if (!Array.isArray(orderData) || orderData.length === 0) {
            console.warn('No orders data available for today.');
            return;
        }

        const labels = orderData.map(order => new Date(order.dateOrdered).toLocaleTimeString());
        const amounts = orderData.map(order => order.totalPrice);

        const ctx = document.getElementById('orderChart').getContext('2d');
        orderChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Order Amounts',
                    data: amounts,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Category-wise chart
        const categoryLabels = `<%- categoryLabels %>`;
        const categorySales = `<%- categorySales %>`;
        const context = document.getElementById('categoryChart').getContext('2d');
        categoryChart = new Chart(context, {
            type: 'bar',
            data: {
                labels: JSON.parse(categoryLabels),
                datasets: [{
                    label: 'Category Sales',
                    data: JSON.parse(categorySales),
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    } catch (error) {
        console.error('Error parsing order data:', error);
    }
});


            // function to update the chart
            const timeIntervalSelect = document.getElementById('timeIntervalSelect');
            const dateSelect = document.getElementById('dateSelect');
            const monthSelect = document.getElementById('monthSelect');
            const yearSelect = document.getElementById('yearSelect');

            // Show and hide input fields based on selected interval
            timeIntervalSelect.addEventListener('change', (event) => {
                const selectedOption = event.target.value;
                document.getElementById('dateInput').style.display = selectedOption === 'day' ? 'block' : 'none';
                document.getElementById('monthInput').style.display = selectedOption === 'month' ? 'block' : 'none';
                document.getElementById('yearInput').style.display = selectedOption === 'year' ? 'block' : 'none';
            });

// Event listener for date selection
dateSelect.addEventListener('change', () => {
    const selectedDate = dateSelect.value;
    if (selectedDate) {
        fetchOrders(`?date=${selectedDate}`);
    }
});

// Event listener for month selection
monthSelect.addEventListener('change', () => {
    const selectedMonth = monthSelect.value;
    if (selectedMonth) {
        fetchOrders(`?month=${selectedMonth}`);
    }
});

// Event listener for year selection
yearSelect.addEventListener('change', () => {
    const selectedYear = yearSelect.value;
    if (selectedYear) {
        fetchOrders(`?year=${selectedYear}`);
    }
});

      

let orderChart = null;
let categoryChart = null;

async function fetchOrders(queryString) {
    try {
        const response = await fetch(`/admin/orders${queryString}`);
        const data = await response.json();

        if (response.ok) {
            console.log('Fetched data:', data);
            
            const categoryLabels = data.categoryLabels;
            const categorySales = data.categorySales;
            const labels = data.orders.map(order => new Date(order.dateOrdered).toLocaleTimeString());
            const amounts = data.orders.map(order => order.totalPrice);

            const ctx = document.getElementById('orderChart').getContext('2d');

            // Destroy the existing chart before creating a new one
            if (orderChart) {
                orderChart.destroy();
            }

            orderChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Order Amounts',
                        data: amounts,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

            const context = document.getElementById('categoryChart').getContext('2d');

            // Destroy the existing category chart before creating a new one
            if (categoryChart) {
                categoryChart.destroy();
            }

            categoryChart = new Chart(context, {
                type: 'bar',
                data: {
                    labels: categoryLabels,
                    datasets: [{
                        label: 'Category Sales',
                        data: categorySales,
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });

        } else {
            console.log('Error fetching data:', data);
        }
    } catch (error) {
        console.error('Error fetching data:', error);
    }
}

   // Function to set report type and show/hide date inputs based on interval
   let reportType = '';
    let myModal;

function setReportType(type) {
    
     reportType = type;
     // Use Bootstrap's modal API to show the modal
      myModal = new bootstrap.Modal(document.getElementById('reportModal'), {
        keyboard: false
    });

    myModal.show();
}
document.getElementById('closeButton').addEventListener('click', () => {
    // document.getElementById('reportModal').style.display = 'none';
    if (myModal) {
                myModal.hide();
            }
})
const reportIntervalSelect = document.getElementById('reportIntervalSelect');
const reportDateInput = document.getElementById('reportDateInput');
const reportWeekInput = document.getElementById('reportWeekInput');
const reportMonthInput = document.getElementById('reportMonthInput');
const reportYearInput = document.getElementById('reportYearInput');
const reportCustomDateRange = document.getElementById('reportCustomDateRange');

reportIntervalSelect.addEventListener('change', (event) => {
    const selectedOption = event.target.value;
    reportDateInput.style.display = selectedOption === 'day' ? 'block' : 'none';
    reportWeekInput.style.display = selectedOption === 'week' ? 'block' : 'none';
    reportMonthInput.style.display = selectedOption === 'month' ? 'block' : 'none';
    reportYearInput.style.display = selectedOption === 'year' ? 'block' : 'none';
    reportCustomDateRange.style.display = selectedOption === 'custom' ? 'block' : 'none';
});

document.getElementById('generateReportButton').addEventListener('click', async() => {
    const interval = reportIntervalSelect.value;
    // let queryString = '';
    let queryString = `?reportType=${reportType}`; 

    if (interval === 'day') {
        const date = document.getElementById('reportDateSelect').value;
        queryString += `&interval=day&date=${date}`;
    } else if (interval === 'week') {
        const date = document.getElementById('reportDateSelect').value;
        queryString += `&interval=week&date=${date}`;
    } else if (interval === 'month') {
        const month = document.getElementById('reportMonthSelect').value;
        queryString += `&interval=month&month=${month}`;
    } else if (interval === 'year') {
        const year = document.getElementById('reportYearSelect').value;
        queryString += `&interval=year&year=${year}`;
    } else if (interval === 'custom') {
        const startDate = document.getElementById('reportStartDate').value;
        const endDate = document.getElementById('reportEndDate').value;
        queryString += `&interval=custom&startDate=${startDate}&endDate=${endDate}`;
    }
    
        if (queryString) {
            try {
            const response = await  fetch(`/admin/reports${queryString}`)
            if(response.ok){
                const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `report.${reportType}`;
            document.body.appendChild(a);
            a.click();
            a.remove();

            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'The report has been generated and downloaded successfully.',
                showConfirmButton: false,
                timer: 2000
            });
            }else{
                // throw new Error('Network response was not ok');
                const error = await response.json();
                Swal.fire({
                  icon: 'error',
                  title: 'Error!',
                  text: error.message ||'There was an error generating the report..',
                  showConfirmButton: false,
                  timer: 2000
              });
              
            }
        } catch (error) {
            console.log('Error generating report:', error);
            Swal.fire({
                  icon: 'error',
                  title: 'Error!',
                  text: 'There was an error generating the report. Please try again.',
              });
        }

          }
  });
    
        </script>










